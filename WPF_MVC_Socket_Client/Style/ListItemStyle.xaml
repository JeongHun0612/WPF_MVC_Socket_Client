<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:viewModel="clr-namespace:WPF_MVC_Socket_Client.ViewModel">

    <Style TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Red"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static viewModel:MainWindowViewModel.ReceiveOptionViewModel}, Path=IsLineBreak}" Value="True">
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Source={x:Static viewModel:MainWindowViewModel.ReceiveOptionViewModel}, Path=IsLineBreak}" Value="False">
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="FontFamily" Value="/Fonts/#Roboto Light"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListItemHoverBackgroudBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListItemSelectedTrueBackgroudBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListItemSelectedFalseBackgroudBrush}"/>
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RXTXTag}" Value="[RX]"/>
                                <Condition Binding="{Binding Source={x:Static viewModel:MainWindowViewModel.ReceiveOptionViewModel}, Path=IsReceive}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RXTXTag}" Value="[TX]"/>
                                <Condition Binding="{Binding Source={x:Static viewModel:MainWindowViewModel.ReceiveOptionViewModel}, Path=IsTransmit}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RXTXTagTextStyle -->
    <Style x:Key="RXTXTagTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="5,0,5,0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RXTXTag}" Value="[RX]">
                <Setter Property="Foreground" Value="{StaticResource ListItemRXTagForegroundBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RXTXTag}" Value="[TX]">
                <Setter Property="Foreground" Value="{StaticResource ListItemTXTagForegroundBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
  
    <!-- ContentTextStyle -->
    <Style x:Key="ContentTextStyle" TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static viewModel:MainWindowViewModel.ReceiveOptionViewModel}, Path=IsLineBreak}" Value="True">
                <Setter Property="TextWrapping" Value="Wrap"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Source={x:Static viewModel:MainWindowViewModel.ReceiveOptionViewModel}, Path=IsLineBreak}" Value="False">
                <Setter Property="TextWrapping" Value="NoWrap"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>